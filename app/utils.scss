@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

$breakpoints: (
  phone: 0rem,
  tablet: 37.5rem,
  laptop: 56.25rem,
  desktop: 75rem
);

$colors: (
  gray: (
    colors: #ffffff #121212,
    shades: 0 100 200 300 400 500
  ),
  green: (
    colors: #1fdf64 #169c46,
    shades: 100 200 300 400 500
  ),
  red: (
    colors: #ffbaba #a70000,
    shades: 100 200 300
  )
);

$tokens: (
  background: (
    light: gray 0,
    dark: gray 500
  ),
  on-background: (
    light: gray 500,
    dark: gray 0
  ),
  accent: green 300,
  on-accent: gray 500,
  accent-outline: green 500,
  accent-hover: green 200,
  accent-active: green 100,
  surface: (
    light: gray 100,
    dark: gray 400
  ),
  on-surface: on-background
);

@mixin with-breakpoint($breakpoint) {
  $width: map.get($breakpoints, $breakpoint);

  @if $width > 0 {
    @media (min-width: #{$width}) {
      @content
    }
  } @else {
    @content
  }
}

@function generate-shades($start, $end, $shades) {
  $result: ();
  $length: list.length($shades);
  $min: math.min($shades...);
  $max: math.max($shades...);

  @each $shade in $shades {
    $weight: if($length > 1, math.percentage((($shade - $max) * math.div(1, $min - $max))), 0%);
    $result: map.set($result, $shade, color.mix($start, $end, $weight));
  }

  @return $result;
}

@function generate-palette($colors) {
  $result: ();

  @each $color, $config in $colors {
    $colors: map.get($config, colors);
    $shades: map.get($config, shades);
    $result: map.set($result, $color, generate-shades(list.nth($colors, 1), list.nth($colors, 2), $shades));
  }

  @return $result;
}

@function get-color($token, $theme) {
  $colors: map.get($tokens, $token);
  $color: if(meta.type-of($colors) == 'map', map.get($colors, $theme), $colors);

  @if meta.type-of($color) == 'string' {
    $color: get-color($color, $theme);
  }

  @return $color;
}

@mixin with-colors($theme) {
  $palette: generate-palette($colors);

  @each $token in map.keys($tokens) {
    $color: get-color($token, $theme);

    --#{$token}: #{map.get(map.get($palette, list.nth($color, 1)), list.nth($color, 2))};
  }
}
